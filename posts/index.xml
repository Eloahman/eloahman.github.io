<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Mem.Wey&#39;s Github Pages</title>
		<link>https://memwey.github.io/posts/</link>
		<description>Recent content in Posts on Mem.Wey&#39;s Github Pages</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 14 Oct 2019 11:12:33 +0800</lastBuildDate>
		<atom:link href="https://memwey.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Oh MySQL Emoji</title>
			<link>https://memwey.github.io/posts/code/oh-mysql-emoji/</link>
			<pubDate>Mon, 14 Oct 2019 11:12:33 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/code/oh-mysql-emoji/</guid>
			<description>又是关于 MySQL 的, 标题来自于 &amp;lt;轮到你了&amp;gt; 这部烂尾日剧, 里面非常魔性的 Oh~my~Ju~lia~ 在MySQL里面如何保存 Emoji, 这个问题搜一搜很容易找到答案, 设置 CHARSET</description>
			<content type="html"><![CDATA[

<p>又是关于 <code>MySQL</code> 的, 标题来自于 &lt;轮到你了&gt; 这部<del>烂尾</del>日剧, 里面非常魔性的 Oh~my~Ju~lia~</p>

<p>在MySQL里面如何保存 <a href="https://en.wikipedia.org/wiki/Emoji" target="_blank">Emoji</a>, 这个问题搜一搜很容易找到答案, 设置 <strong>CHARSET</strong> 为 <code>utf8mb4</code>, 看来天下苦 <code>MySQL</code> 久矣.</p>

<h2 id="基础知识">基础知识</h2>

<p>计算机最早是美国人发明的, 那时的编码都是 <code>ASCII</code> 码, 毕竟英文字符加上标点符号也就那么多嘛, 一个字节绰绰有余.</p>

<p>但是随着计算机的发展, 计算机面向的国家和语言越来越多, 一个字节根本不够用了, 于是就有了很多面向特定语言的编码, 比如汉字的<code>GBK</code>, <code>Big5</code>, 韩文的 <code>EUC-KR</code>, 日文的 <code>Shift_JIS</code> 什么的. 总体思想是, 既然一个字节不够用, 那就多几个字节就是了嘛.</p>

<p>但是问题又出现了, 同一个编码在不同语言中会有不同的含义,比如韩文编码 <code>EUC-KR</code> 中 <code>한국어</code> 的编码值正好对应着汉字编码 <code>GBK</code> 中的 <code>茄惫绢</code>. 这样仿佛就变成了巴别塔的故事. 人们虽然用着同样的二进制编码, 但是却表达着不同的意思; 就像人们虽然同样发出声带的震动, 但是却无法互相理解对方的话语.</p>

<p><a href="https://en.wikipedia.org/wiki/International_Organization_for_Standardization" target="_blank">国际标准化组织</a> 和 <a href="https://en.wikipedia.org/wiki/Unicode_Consortium" target="_blank">统一码联盟</a> 意识到,这样下去是不行的, 不如搞一个超大的字符集,然后把人类所有字符都弄进去,这样人类都可以用同一个标准了. 于是, 他们分别制定了 <a href="https://en.wikipedia.org/wiki/Universal_Coded_Character_Set" target="_blank">USC</a> 和 <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank">Unicode</a>. 当然, 如果两个标准各搞各的, 那就和他们最初的想法背道而驰了, 所以目前这两个字符集在实际使用中是一致的. 一般还是把这个字符集叫 <code>Unicode</code>.</p>

<p><code>Unicode</code> 的范围上限是 <code>0x10FFFF</code>, 换算成十进制就是 <code>1,114,111</code> 这么多. 所以如果以后外星人的文字太多, 说不定这个范围就不够了.</p>

<p>其实这里悄悄的偷换了一个概念, 之前在说编码, 现在变成了字符集了. 在很多之前提到的编码中, 这些编码既是字符集, 又是直接的编码. 而在 <code>Unicode</code> 中, 字符集实际上是与编码分开的两个概念, 而对应的编码, 实际上就是我们经常见到的 <code>UTF</code>. 其中 <code>UTF-8</code> 是我们最常见的一种编码了.</p>

<p><code>UTF-8</code> 最大的特点, 就是它是一种变长的编码方式, 而且完全兼容 <code>ASCII</code>码.</p>

<p><code>UTF-8</code> 的编码规则也很简单，只有二条:</p>

<ul>
<li><p>对于单字节的符号, 字节的第一位设为<code>0</code>, 后面7位为这个符号的 Unicode 码. 对于 <code>0 - 127</code> 位的字符，UTF-8 编码和 ASCII 码是完全相同的.</p></li>

<li><p>对于<code>n</code>字节的符号<code>(n &gt; 1)</code>, 第一个字节的前<code>n</code>位都设为<code>1</code>, 第<code>n + 1</code>位设为<code>0</code>, 后面字节的前两位一律设为<code>10</code>. 剩下的没有提及的二进制位, 全部为这个符号的 Unicode 码.</p></li>
</ul>

<table>
<thead>
<tr>
<th>Unicode符号范围</th>
<th>UTF-8编码方式</th>
</tr>
</thead>

<tbody>
<tr>
<td>U+0000 - U+007F</td>
<td>0xxxxxxx</td>
</tr>

<tr>
<td>U+0080 - U+07FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>

<tr>
<td>U+0800 - U+FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>

<tr>
<td>U+010000 - U+10FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>

<p>在这里我们发现, <code>U+0000 - U+FFFF</code> 这个<strong>平面</strong>(Plane), 即<strong>基本多文种平面</strong>, 简称 <code>BMP</code>, 用 <code>UTF-8</code> 进行编码, 只需要三个字节.</p>

<h2 id="轮到你了">轮到你了</h2>

<p>在 <code>MySQL</code> 的 <strong>CHARSET</strong> 中, <code>utf8</code> 支持存储 1 - 3字节的字符, 即对应 <code>Unicode</code> 中 <code>BMP</code> 的部分, 而 <a href="https://en.wikipedia.org/wiki/Emoji" target="_blank">Emoji</a>, 则大多数在 <code>BMP</code> 之外. 所以 <code>MySQL</code> 中的 <code>utf8</code> 是假的, 是化学的成分, 是加了特技的. 如果想储存真正的 <code>UTF-8</code> 的内容, 就一定要使用 <code>utf8mb4</code>.</p>

<p>当然, 并不是所有的 <a href="https://en.wikipedia.org/wiki/Emoji" target="_blank">Emoji</a> 都在 <code>BMP</code> 之外, 比如 ☺ 这个表情, 它的编码是 <code>U+263A</code>, 还有 ☹️ , 编码是 <code>U+2639</code>.</p>

<p>当然, 也不是所有的汉字都被包含在了 <code>BMP</code> 里面了, 在 <a href="https://www.compart.com/en/unicode/block" target="_blank">这里</a> 可以看到字符是按照一定的规律划分为 <code>Block</code> 放进来的, 在<strong>表意文字补充平面</strong>也就是 <code>U+20000 - U+2FFFF</code> 这个<strong>平面</strong>(Plane), 还是有很多 <code>CJK</code> 命名的 <code>Block</code> 的.</p>

<h2 id="再来一瓶">再来一瓶</h2>

<p>你以为坑到这里就结束了吗</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">emoji_test</span><span class="o">`</span> <span class="p">(</span>
  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">INT</span> <span class="n">UNSIGNED</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="o">`</span><span class="n">emoji</span><span class="o">`</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8mb4</span><span class="p">;</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SET</span> <span class="k">NAMES</span> <span class="n">utf8mb4</span><span class="p">;</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">MySQL <span class="o">[</span>test<span class="o">]</span>&gt; SELECT * FROM emoji_test<span class="p">;</span>
+----+-------+
<span class="p">|</span> id <span class="p">|</span> emoji <span class="p">|</span>
+----+-------+
<span class="p">|</span>  <span class="m">8</span> <span class="p">|</span> 😃      <span class="p">|</span>
<span class="p">|</span>  <span class="m">9</span> <span class="p">|</span> 😂      <span class="p">|</span>
<span class="p">|</span> <span class="m">10</span> <span class="p">|</span> 🤦      <span class="p">|</span>
+----+-------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span><span class="m">0</span>.001 sec<span class="o">)</span>

MySQL <span class="o">[</span>test<span class="o">]</span>&gt; SELECT * FROM emoji_test WHERE <span class="nv">emoji</span> <span class="o">=</span> <span class="s1">&#39;😂&#39;</span><span class="p">;</span>
+----+-------+
<span class="p">|</span> id <span class="p">|</span> emoji <span class="p">|</span>
+----+-------+
<span class="p">|</span>  <span class="m">8</span> <span class="p">|</span> 😃      <span class="p">|</span>
<span class="p">|</span>  <span class="m">9</span> <span class="p">|</span> 😂      <span class="p">|</span>
<span class="p">|</span> <span class="m">10</span> <span class="p">|</span> 🤦      <span class="p">|</span>
+----+-------+
<span class="m">3</span> rows in <span class="nb">set</span> <span class="o">(</span><span class="m">0</span>.001 sec<span class="o">)</span></code></pre></div>
<p>是不是很神奇呢, 看下表的信息呢</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="n">MySQL</span> <span class="p">[</span><span class="n">test</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="k">TABLE</span> <span class="n">STATUS</span> <span class="k">WHERE</span> <span class="n">Name</span> <span class="o">=</span> <span class="s1">&#39;emoji_test&#39;</span><span class="p">;</span>
<span class="o">+</span><span class="c1">------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+--------------------+----------+----------------+---------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">Name</span>       <span class="o">|</span> <span class="n">Engine</span> <span class="o">|</span> <span class="k">Version</span> <span class="o">|</span> <span class="n">Row_format</span> <span class="o">|</span> <span class="k">Rows</span> <span class="o">|</span> <span class="n">Avg_row_length</span> <span class="o">|</span> <span class="n">Data_length</span> <span class="o">|</span> <span class="n">Max_data_length</span> <span class="o">|</span> <span class="n">Index_length</span> <span class="o">|</span> <span class="n">Data_free</span> <span class="o">|</span> <span class="n">Auto_increment</span> <span class="o">|</span> <span class="n">Create_time</span>         <span class="o">|</span> <span class="n">Update_time</span>         <span class="o">|</span> <span class="n">Check_time</span> <span class="o">|</span> <span class="k">Collation</span>          <span class="o">|</span> <span class="n">Checksum</span> <span class="o">|</span> <span class="n">Create_options</span> <span class="o">|</span> <span class="k">Comment</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+--------------------+----------+----------------+---------+
</span><span class="c1"></span><span class="o">|</span> <span class="n">emoji_test</span> <span class="o">|</span> <span class="n">InnoDB</span> <span class="o">|</span>      <span class="mi">10</span> <span class="o">|</span> <span class="k">Dynamic</span>    <span class="o">|</span>    <span class="mi">3</span> <span class="o">|</span>           <span class="mi">5461</span> <span class="o">|</span>       <span class="mi">16384</span> <span class="o">|</span>               <span class="mi">0</span> <span class="o">|</span>            <span class="mi">0</span> <span class="o">|</span>         <span class="mi">0</span> <span class="o">|</span>             <span class="mi">11</span> <span class="o">|</span> <span class="mi">2019</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">16</span> <span class="mi">11</span><span class="p">:</span><span class="mi">16</span><span class="p">:</span><span class="mi">28</span> <span class="o">|</span> <span class="mi">2019</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">16</span> <span class="mi">11</span><span class="p">:</span><span class="mi">25</span><span class="p">:</span><span class="mi">10</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="n">utf8mb4_general_ci</span> <span class="o">|</span>     <span class="k">NULL</span> <span class="o">|</span>                <span class="o">|</span>         <span class="o">|</span>
<span class="o">+</span><span class="c1">------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+---------------------+------------+--------------------+----------+----------------+---------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span></code></pre></div>
<p>可以看到此时默认的字符序是 <code>utf8mb4_general_ci</code>, 使用 <code>WEIGHT_STRING</code> 来查询这些 Emoji 的字符序</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="n">MySQL</span> <span class="p">[</span><span class="n">test</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="o">@</span><span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;😂&#39;</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_general_ci</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">003</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">MySQL</span> <span class="p">[</span><span class="n">test</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="o">@</span><span class="n">s</span><span class="p">,</span> <span class="n">HEX</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">),</span> <span class="n">HEX</span><span class="p">(</span><span class="n">WEIGHT_STRING</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">));</span>
<span class="o">+</span><span class="c1">------+----------+------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="o">@</span><span class="n">s</span>   <span class="o">|</span> <span class="n">HEX</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">)</span>  <span class="o">|</span> <span class="n">HEX</span><span class="p">(</span><span class="n">WEIGHT_STRING</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">))</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------+----------+------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="err">😂</span>     <span class="o">|</span> <span class="n">F09F9882</span> <span class="o">|</span> <span class="n">FFFD</span>                   <span class="o">|</span>
<span class="o">+</span><span class="c1">------+----------+------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">MySQL</span> <span class="p">[</span><span class="n">test</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="o">@</span><span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;😃&#39;</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_general_ci</span><span class="p">;</span>
<span class="n">Query</span> <span class="n">OK</span><span class="p">,</span> <span class="mi">0</span> <span class="k">rows</span> <span class="n">affected</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">MySQL</span> <span class="p">[</span><span class="n">test</span><span class="p">]</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="o">@</span><span class="n">s</span><span class="p">,</span> <span class="n">HEX</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">),</span> <span class="n">HEX</span><span class="p">(</span><span class="n">WEIGHT_STRING</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">));</span>
<span class="o">+</span><span class="c1">------+----------+------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="o">@</span><span class="n">s</span>   <span class="o">|</span> <span class="n">HEX</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">)</span>  <span class="o">|</span> <span class="n">HEX</span><span class="p">(</span><span class="n">WEIGHT_STRING</span><span class="p">(</span><span class="o">@</span><span class="n">s</span><span class="p">))</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">------+----------+------------------------+
</span><span class="c1"></span><span class="o">|</span> <span class="err">😃</span>     <span class="o">|</span> <span class="n">F09F9883</span> <span class="o">|</span> <span class="n">FFFD</span>                   <span class="o">|</span>
<span class="o">+</span><span class="c1">------+----------+------------------------+
</span><span class="c1"></span><span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span></code></pre></div>
<p>可以看到, 它们的编码虽然不同, 但是字符序的值是相同的, 都是 <code>0xFFFD</code>, 所以在匹配的时候, 它们被认为是同一个字符, 这又是 <code>MySQL</code> 的一个大坑</p>

<p>要是想粗暴点解决问题的话, 直接使用 <code>utf8mb4_bin</code> 作为字符序就好了</p>

<h2 id="参考资料">参考资料</h2>

<ol>
<li><a href="https://stackoverflow.com/questions/41147829/how-can-i-search-by-emoji-in-mysql-using-utf8mb4" target="_blank">How can I search by emoji in MySQL using utf8mb4?</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank">字符编码笔记：ASCII，Unicode 和 UTF-8
</a></li>
<li><a href="https://www.zhihu.com/question/60072951" target="_blank">如何通俗地理解Unicode、UTF-8、ASCII、GBK等字符编码？</a></li>
<li><a href="https://medium.com/@adamhooper/in-mysql-never-use-utf8-use-utf8mb4-11761243e434" target="_blank">In MySQL, never use “utf8”. Use “utf8mb4”.</a></li>
<li><a href="https://mathiasbynens.be/notes/mysql-utf8mb4" target="_blank">How to support full Unicode in MySQL databases</a></li>
</ol>

<h2 id="扩展阅读">扩展阅读</h2>

<ol>
<li><a href="https://zhuanlan.zhihu.com/p/53714077" target="_blank">其实你并不懂 Unicode</a></li>
<li><a href="https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/" target="_blank">Dark corners of Unicode</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Oh MySQL IN Subquery</title>
			<link>https://memwey.github.io/posts/code/oh-mysql-in-subquery/</link>
			<pubDate>Sat, 21 Sep 2019 15:22:58 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/code/oh-mysql-in-subquery/</guid>
			<description>感觉 MySQL 的坑实在是有点多,记录一下这个 MySQL 的坑, 也记录一下这个教训吧, 下次在数据库中直接操作一定要多小心 现象回放 现在有两张表, 表结构如下, 无关字</description>
			<content type="html"><![CDATA[

<p>感觉 <code>MySQL</code> 的坑实在是有点多,记录一下这个 <code>MySQL</code> 的坑, 也记录一下这个教训吧, 下次在数据库中直接操作一定要多小心</p>

<h2 id="现象回放">现象回放</h2>

<p>现在有两张表, 表结构如下, 无关字段已经省略</p>

<ul>
<li><p>team</p>

<pre><code>+-------------+---------------------+
| Field       | Type                |
+-------------+---------------------+
| id          | int(10) unsigned    |
| status      | tinyint(3) unsigned |
+-------------+---------------------+
</code></pre></li>

<li><p>player</p>

<pre><code>+-------------+---------------------+
| Field       | Type                |
+-------------+---------------------+
| id          | int(10) unsigned    |
| team_id     | int(10) unsigned    |
| status      | tinyint(3) unsigned |
+-------------+---------------------+
</code></pre></li>
</ul>

<p>容易理解, 这是简单的一对多的关系, 一个足球队 team 里面, 有多个球员 player</p>

<p>现在想取出有 player 的状态为 <code>1</code> 的 team</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">team</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">id</span> <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">team_id</span> <span class="k">FROM</span> <span class="n">player</span> <span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">a</span><span class="p">);</span></code></pre></div>
<p>理论上, 这条语句是不能执行的, 注意这里</p>

<blockquote>
<p>&hellip;&hellip; SELECT id FROM (SELECT team_id FROM &hellip;&hellip;</p>
</blockquote>

<p>但是, 不知道为何, 这条语句是可以执行的, 而且等价于</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">team</span><span class="p">;</span></code></pre></div>
<p>如果单独把最外层的 IN 里面的 subquery 取出来, <code>MySQL</code> 会报错</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">id</span> <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">team_id</span> <span class="k">FROM</span> <span class="n">player</span> <span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">a</span><span class="p">;</span></code></pre></div>
<blockquote>
<p>ERROR 1054 (42S22): Unknown column &lsquo;id&rsquo; in &lsquo;field list&rsquo;</p>
</blockquote>

<p>再试着把 id 改为不存在的字段</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">team</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">not_exist_field</span> <span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">team_id</span> <span class="k">FROM</span> <span class="n">player</span> <span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">a</span><span class="p">);</span></code></pre></div>
<blockquote>
<p>ERROR 1054 (42S22): Unknown column &lsquo;not_exist_field&rsquo; in &lsquo;field list&rsquo;</p>
</blockquote>

<p>这样才能如预期的报错</p>

<h2 id="问题排查">问题排查</h2>

<p>先 EXPLAIN 试试呢</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
           <span class="n">id</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">select_type</span><span class="p">:</span> <span class="k">SIMPLE</span>
        <span class="k">table</span><span class="p">:</span> <span class="n">team</span>
   <span class="n">partitions</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">type</span><span class="p">:</span> <span class="k">ALL</span>
<span class="n">possible_keys</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">key</span><span class="p">:</span> <span class="k">NULL</span>
      <span class="n">key_len</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">ref</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">rows</span><span class="p">:</span> <span class="mi">2</span>
     <span class="n">filtered</span><span class="p">:</span> <span class="mi">100</span><span class="p">.</span><span class="mi">00</span>
        <span class="n">Extra</span><span class="p">:</span> <span class="k">NULL</span>
<span class="o">***************************</span> <span class="mi">2</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
           <span class="n">id</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">select_type</span><span class="p">:</span> <span class="k">SIMPLE</span>
        <span class="k">table</span><span class="p">:</span> <span class="n">player</span>
   <span class="n">partitions</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">type</span><span class="p">:</span> <span class="k">ALL</span>
<span class="n">possible_keys</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">key</span><span class="p">:</span> <span class="k">NULL</span>
      <span class="n">key_len</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">ref</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">rows</span><span class="p">:</span> <span class="mi">5</span>
     <span class="n">filtered</span><span class="p">:</span> <span class="mi">20</span><span class="p">.</span><span class="mi">00</span>
        <span class="n">Extra</span><span class="p">:</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="n">FirstMatch</span><span class="p">(</span><span class="n">team</span><span class="p">);</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span>
<span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">2</span> <span class="n">warnings</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span></code></pre></div>
<p>好像看不出来什么问题呢, 不过有 warnings, 看一下呢</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SHOW</span> <span class="n">WARNINGS</span><span class="err">\</span><span class="k">G</span></code></pre></div>
<pre><code>*************************** 1. row ***************************
  Level: Note
   Code: 1276
Message: Field or reference 'test.team.id' of SELECT #2 was resolved in SELECT #1
*************************** 2. row ***************************
  Level: Note
   Code: 1003
Message: /* select#1 */ select `test`.`team`.`id` AS `id`,`test`.`team`.`status` AS `status` from `test`.`team` semi join (`test`.`player`) where (`test`.`player`.`status` = 1)
2 rows in set (0.001 sec)
</code></pre>

<p>这里出现了一个 <code>semi join</code>, 没有见过呢, 查看一下文档, 大意就是, 比如使用 <code>INNER JOIN</code> 的时候, 会返回匹配次数个结果. 但是我们并不关注匹配的次数, 比如如下语句, 我想取出有球员的 status 为 0 的球队, 可以这样写</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">team</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">player</span> <span class="k">ON</span> <span class="n">team</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">team_id</span> <span class="k">WHERE</span> <span class="n">player</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></code></pre></div>
<p>如果一个球队里有多个 status 为 0 的球员, 那么就会出现多个记录, 比如这样</p>

<pre><code>+----+--------+----+---------+--------+
| id | status | id | team_id | status |
+----+--------+----+---------+--------+
|  1 |      0 |  1 |       1 |      0 |
|  1 |      0 |  2 |       1 |      0 |
|  2 |      0 |  5 |       2 |      0 |
|  2 |      0 |  6 |       2 |      0 |
+----+--------+----+---------+--------+
</code></pre>

<p>这样明显有些冗余的数据了. 当然我们可以用 <code>DISTINCT</code> 什么的再处理一遍, 但是这样效率会比较低. 那么, 就可以用类似的子查询就方便多了</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">team</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">team_id</span> <span class="k">FROM</span> <span class="n">player</span> <span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">);</span></code></pre></div>
<p>返回的结果也简洁多了</p>

<pre><code>+----+--------+
| id | status |
+----+--------+
|  1 |      0 |
|  2 |      0 |
+----+--------+
</code></pre>

<p>当然, 要这样优化还是有很多条件的, 林林总总的, 可以去官方文档查看</p>

<p>看了这么多, 感觉还是和这个问题没什么关系啊, 试着 EXPLAIN 一下正确的语句</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
           <span class="n">id</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">select_type</span><span class="p">:</span> <span class="k">SIMPLE</span>
        <span class="k">table</span><span class="p">:</span> <span class="n">team</span>
   <span class="n">partitions</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">type</span><span class="p">:</span> <span class="k">ALL</span>
<span class="n">possible_keys</span><span class="p">:</span> <span class="k">PRIMARY</span>
          <span class="k">key</span><span class="p">:</span> <span class="k">NULL</span>
      <span class="n">key_len</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">ref</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">rows</span><span class="p">:</span> <span class="mi">2</span>
     <span class="n">filtered</span><span class="p">:</span> <span class="mi">100</span><span class="p">.</span><span class="mi">00</span>
        <span class="n">Extra</span><span class="p">:</span> <span class="k">NULL</span>
<span class="o">***************************</span> <span class="mi">2</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
           <span class="n">id</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">select_type</span><span class="p">:</span> <span class="k">SIMPLE</span>
        <span class="k">table</span><span class="p">:</span> <span class="n">player</span>
   <span class="n">partitions</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">type</span><span class="p">:</span> <span class="k">ALL</span>
<span class="n">possible_keys</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">key</span><span class="p">:</span> <span class="k">NULL</span>
      <span class="n">key_len</span><span class="p">:</span> <span class="k">NULL</span>
          <span class="k">ref</span><span class="p">:</span> <span class="k">NULL</span>
         <span class="k">rows</span><span class="p">:</span> <span class="mi">5</span>
     <span class="n">filtered</span><span class="p">:</span> <span class="mi">20</span><span class="p">.</span><span class="mi">00</span>
        <span class="n">Extra</span><span class="p">:</span> <span class="k">Using</span> <span class="k">where</span><span class="p">;</span> <span class="n">FirstMatch</span><span class="p">(</span><span class="n">team</span><span class="p">);</span> <span class="k">Using</span> <span class="k">join</span> <span class="n">buffer</span> <span class="p">(</span><span class="n">Block</span> <span class="n">Nested</span> <span class="n">Loop</span><span class="p">)</span>
<span class="mi">2</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span></code></pre></div>
<p>再看看 warnings</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="o">***************************</span> <span class="mi">1</span><span class="p">.</span> <span class="k">row</span> <span class="o">***************************</span>
  <span class="k">Level</span><span class="p">:</span> <span class="n">Note</span>
   <span class="n">Code</span><span class="p">:</span> <span class="mi">1003</span>
<span class="n">Message</span><span class="p">:</span> <span class="cm">/* select#1 */</span> <span class="k">select</span> <span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">team</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="k">AS</span> <span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">,</span><span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">team</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">status</span><span class="o">`</span> <span class="k">AS</span> <span class="o">`</span><span class="n">status</span><span class="o">`</span> <span class="k">from</span> <span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">team</span><span class="o">`</span> <span class="n">semi</span> <span class="k">join</span> <span class="p">(</span><span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">)</span> <span class="k">where</span> <span class="p">((</span><span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">team_id</span><span class="o">`</span> <span class="o">=</span> <span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">team</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span> <span class="k">and</span> <span class="p">(</span><span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">status</span><span class="o">`</span> <span class="o">=</span> <span class="mi">1</span><span class="p">))</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">001</span> <span class="n">sec</span><span class="p">)</span></code></pre></div>
<p>对照着实际运行的语句的 Note, 发现错误的语句缺少了以下这个条件</p>

<blockquote>
<p>((<code>test</code>.<code>player</code>.<code>team_id</code> = <code>test</code>.<code>team</code>.<code>id</code>)</p>
</blockquote>

<p>难道就是你! 但是为什么又有</p>

<blockquote>
<p>Field or reference &lsquo;test.team.id&rsquo; of SELECT #2 was resolved in SELECT #1</p>
</blockquote>

<p>这个问题呢</p>

<p>总感觉是个Bug&hellip;&hellip;</p>

<p>To Be Continued&hellip;&hellip;</p>

<h2 id="参考资料">参考资料</h2>

<ol>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/semijoins.html" target="_blank">Optimizing Subqueries, Derived Tables, and View References with Semijoin Transformations</a></li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Yes</title>
			<link>https://memwey.github.io/posts/code/yes/</link>
			<pubDate>Fri, 14 Dec 2018 23:34:15 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/code/yes/</guid>
			<description>最近看到一个有趣的GNU/Linux命令, yes 先man一下 YES(1) BSD General Commands Manual YES(1) NAME yes -- be repetitively affirmative SYNOPSIS yes [expletive] DESCRIPTION yes outputs expletive, or, by default, ``y&amp;#39;&amp;#39;, forever. HISTORY The yes command appeared in 4.0BSD. 4th Berkeley Distribution June 6, 1993 4th Berkeley Distribution (END) e</description>
			<content type="html"><![CDATA[<p>最近看到一个有趣的<code>GNU/Linux</code>命令, <code>yes</code></p>

<p>先<code>man</code>一下</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">YES<span class="o">(</span><span class="m">1</span><span class="o">)</span>                    BSD General Commands Manual                   YES<span class="o">(</span><span class="m">1</span><span class="o">)</span>

NAME
     yes -- be repetitively affirmative

SYNOPSIS
     yes <span class="o">[</span>expletive<span class="o">]</span>

DESCRIPTION
     yes outputs expletive, or, by default, <span class="sb">``</span>y<span class="s1">&#39;&#39;</span>, forever.

HISTORY
     The yes <span class="nb">command</span> appeared in <span class="m">4</span>.0BSD.

4th Berkeley Distribution        June <span class="m">6</span>, <span class="m">1993</span>        4th Berkeley Distribution
<span class="o">(</span>END<span class="o">)</span></code></pre></div>
<p>emmmmm,在<code>macOS</code>下并没有<code>--help</code>或者<code>-h</code>的选项</p>

<p>试试<code>Linux</code>下呢</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">➜  / yes --help
Usage: yes <span class="o">[</span>STRING<span class="o">]</span>...
  or:  yes OPTION
Repeatedly output a line with all specified STRING<span class="o">(</span>s<span class="o">)</span>, or <span class="s1">&#39;y&#39;</span>.

      --help     display this <span class="nb">help</span> and <span class="nb">exit</span>
      --version  output version information and <span class="nb">exit</span>

GNU coreutils online help: &lt;https://www.gnu.org/software/coreutils/&gt;
Full documentation at: &lt;https://www.gnu.org/software/coreutils/yes&gt;
or available locally via: info <span class="s1">&#39;(coreutils) yes invocation&#39;</span></code></pre></div>
<p>有了</p>

<p>简单来说这个命令就是可以反复的输出一个字符串,这个字符串的默认值是<code>y</code></p>

<p>于是有了一些特别的用法,比如,注意这里没有<code>f</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yes <span class="p">|</span> rm -r /</code></pre></div>
<p>还有</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yes <span class="k">$(</span>yes yes<span class="k">)</span></code></pre></div>
<p>好孩子不要乱试</p>

<p>当然这个命令的效果其实一般都有替代,比如加上<code>-f</code>, <code>-y</code>什么的,生成一个大文件也可以用<code>/dev/urandom</code>来做</p>

<p>还可以在冬天做暖手宝,噗</p>

<p>最后,跟我一起在命令行输入</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">yes <span class="s1">&#39;AMD, yes!&#39;</span></code></pre></div>
<p>果然人类的本质就是复读机</p>
]]></content>
		</item>
		
		<item>
			<title>重新开始</title>
			<link>https://memwey.github.io/posts/misc/restart/</link>
			<pubDate>Mon, 17 Sep 2018 23:26:20 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/misc/restart/</guid>
			<description>新的博客,重新开始 这次尝试着坚持一下吧</description>
			<content type="html"><![CDATA[<p>新的博客,重新开始</p>

<p>这次尝试着坚持一下吧</p>
]]></content>
		</item>
		
		<item>
			<title>红黑树笔记</title>
			<link>https://memwey.github.io/posts/code/red-black-tree/</link>
			<pubDate>Tue, 13 Sep 2016 23:32:27 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/code/red-black-tree/</guid>
			<description>最近研究了一下红黑树的一些性质和思想,在这里记录一下. Map,或者在Python等一些语言中叫做dictionary的常用的以键值对形式储存</description>
			<content type="html"><![CDATA[<p>最近研究了一下红黑树的一些性质和思想,在这里记录一下.</p>

<p>Map,或者在<code>Python</code>等一些语言中叫做dictionary的常用的以键值对形式储存的数据结构一般有两种实现方式,在<code>C++</code>的<code>STL</code>中使用了红黑树的方式,而在<code>Python</code>中使用了哈希表的方式.</p>

<p>一般认为采用哈希表的方式查找删除的时间复杂度为<code>O(1)</code>,而红黑树为<code>O(logn)</code>.</p>

<p><code>Python</code>中的哈希表使用开放寻址法解决冲突.</p>

<p>对于普通的二叉查找树来说,查找和插入的时间复杂度在最坏的情况下可能会变成<code>O(n)</code>,即完全偏向一边的不平衡情况使其成为一个单链表.如果只是在树的叶子上增加节点而不进行其他的调整,很容易会使只向下增长的树不平衡.为了保证<code>O(logn)</code>的时间复杂度,我们需要一种动态的机制,来调整树的父节点,乃至于根节点.</p>

<p>红黑树是一种动态调整的实现方式.红黑树其实是在<code>2,3-树</code>的基础上实现的.他们也完全可以等价的转换.不过<code>2,3-树</code>在程序的实现上比较复杂,而且查找操作也和二叉搜索树有一些不同,所以在程序实现中一般使用红黑树.</p>

<p><code>2,3-树</code>和红黑树他们共同的思想是,将树的叶子节点上的操作造成的影响,逐步的传递给父节点,按照一定的方式对当前子树进行调整.父节点再传递给它的父节点,调整更大一些的子树.最终传递到根节点,调整整颗树.</p>

<p>可以这样理解,在红黑树中,用红色来标记正在累计调整的节点.当节点M的两个子节点均被标记,则M取消子节点的标记,并标记自己,使调整向根节点传递.</p>
]]></content>
		</item>
		
		<item>
			<title>在CentOS上使用较新的软件</title>
			<link>https://memwey.github.io/posts/code/centos-latest-software/</link>
			<pubDate>Tue, 02 Aug 2016 23:30:33 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/code/centos-latest-software/</guid>
			<description>公司的服务器都是CentOS的,带的软件都比较旧,让我这个不更新会死星人很难过啊. 开玩笑的,主要问题是git版本太旧, clone的时候会报错</description>
			<content type="html"><![CDATA[<p>公司的服务器都是<code>CentOS</code>的,带的软件都比较旧,让我这个不更新会死星人很难过啊.</p>

<p>开玩笑的,主要问题是<code>git</code>版本太旧, <code>clone</code>的时候会报错,然后也需要<code>python3.5</code>.在<code>git</code>上面发现<a href="https://ius.io/" target="_blank">ius</a>来解决这个问题.</p>

<p><a href="https://ius.io/" target="_blank">ius</a>是一个社区项目,目的是为<a href="https://www.kernel.org/" target="_blank">Linux</a>的企业发行版提供一些更新版本的RPM包.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo yum install epel-release
sudo yum install https://centos6.iuscommunity.org/ius-release.rpm</code></pre></div>
<p>为了解决一些冲突和共存的问题,有一些<code>package</code>在<a href="https://ius.io/" target="_blank">ius</a>中的包名有一些改动</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo yum install git2u
sudo yum install python35u</code></pre></div>
<p>一般的命名规则是</p>

<p><code>{name}{major_version}{minor_version}u</code></p>

<p>这样就可以在<code>CentOS</code>上使用较新的软件啦.</p>
]]></content>
		</item>
		
		<item>
			<title>Linux后台命令</title>
			<link>https://memwey.github.io/posts/code/linux-backgroud/</link>
			<pubDate>Wed, 15 Jun 2016 23:28:24 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/code/linux-backgroud/</guid>
			<description>最近在跑DHT网络拟真的时候涉及到一些linux后台运行的一些东西,现在总结一下 例如 nohup ../src/OverSim -c ChordChurn -u Cmdenv &amp;gt; out.file 2&amp;gt;&amp;amp;1 &amp;amp; 使得 ../src/OverSim -c ChordChurn -u Cmdenv 命令在后台运行,并将s</description>
			<content type="html"><![CDATA[

<p>最近在跑DHT网络拟真的时候涉及到一些linux后台运行的一些东西,现在总结一下</p>

<p>例如</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">nohup ../src/OverSim -c ChordChurn -u Cmdenv &gt; out.file <span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">&amp;</span></code></pre></div>
<p>使得 <code>../src/OverSim -c ChordChurn -u Cmdenv</code> 命令在后台运行,并将<code>stderr</code>重定向到<code>stdout</code>中然后再将<code>stdout</code>重定向到<code>out.file</code>,并且在当前终端关闭时仍然运行</p>

<p>具体说一下吧</p>

<h2 id="nohup">nohup</h2>

<p>退出终端的时候,一般在终端中运行的进程会随之关闭,因为此时终端中的子进程会收到<code>SIGHUP</code>信号.而<code>nohup</code>使得进程忽略所有<code>SIGHUP</code>信号.<code>stdout</code>默认会重定向到<code>nohup.out</code>文件中</p>

<h2 id="toc_1">&amp;</h2>

<p>在命令中末尾加入<code>&amp;</code>符号,使进程在后台运行</p>

<h2 id="2-1">2&gt;&amp;1</h2>

<p>放在<code>&gt;</code>后面的<code>&amp;</code>,表示重定向的目标不是一个文件,而是一个文件描述符,文件描述符</p>

<ul>
<li><code>1 =&gt; stdout</code></li>
<li><code>2 =&gt; stderr</code></li>
<li><code>0 =&gt; stdin</code></li>
</ul>

<h2 id="其他一些命令和操作">其他一些命令和操作</h2>

<p><code>Control+z</code>可以发出<code>SIGSTOP</code>信号,使当前前台进程暂停并放入后台</p>

<p><code>fg [job_id]</code>使进程在前台运行</p>

<p><code>bg [job_id]</code>使进程在后台运行</p>

<p><code>jobs</code> 查看后台进程</p>
]]></content>
		</item>
		
		<item>
			<title>第一篇博客</title>
			<link>https://memwey.github.io/posts/misc/first-blog/</link>
			<pubDate>Tue, 14 Jun 2016 23:22:32 +0800</pubDate>
			
			<guid>https://memwey.github.io/posts/misc/first-blog/</guid>
			<description>其实很早就想弄个博客什么的,觉得有些东西费了很大的力气解决了,然后久而久之就忘了&amp;hellip;&amp;hellip;记录下来应该会好一点吧,这样</description>
			<content type="html"><![CDATA[<p>其实很早就想弄个博客什么的,觉得有些东西费了很大的力气解决了,然后久而久之就忘了&hellip;&hellip;记录下来应该会好一点吧,这样觉得.</p>

<p>所以还是写一些东西吧,嗯嗯&hellip;&hellip;</p>

<p>其实还是不太喜欢这种不怎么能自己定制的东西&hellip;&hellip;总有一种不知所措的感觉&hellip;&hellip;自己写一个后台倒是没什么问题,前端的话就实在是无力了,噗</p>

<p>对Markdown的语法还不那么熟悉,而且好像Markdown有一些不同的解释器,很麻烦啊</p>

<p>每次生成的静态网页还要在本地生成了之后看过效果&hellip;&hellip;啊,真的很麻烦</p>
]]></content>
		</item>
		
	</channel>
</rss>
